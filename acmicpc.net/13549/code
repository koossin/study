#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

vector<bool> visited(100001, false);

int bfs(int n, int k) {
    queue<pair<int,int>> q;
    q.push({n, 0});
    visited[n] = true;

    while(!q.empty()) {
        int size = q.size();

        for(int i = 0; i < size; i++) {
            int cur_node = q.front().first;
            int cur_time = q.front().second;
            q.pop();

            if(cur_node == k)
                return cur_time;

            int minus = cur_node - 1;
            int plus = cur_node + 1;
            int mult = cur_node * 2;
            
            if(mult <= 100000 && !visited[mult]) {
                q.push({cur_node * 2, cur_time});
                visited[mult] = true;
            }
            if(minus >= 0 && !visited[minus]) {
                q.push({minus, cur_time + 1});
                visited[minus] = true;
            }
            if(plus <= 100000 && !visited[plus]) {
                q.push({plus, cur_time + 1});
                visited[plus] = true;
            }
        }
    }

    return -1;
}

int main() {
    ios::sync_with_stdio(false);
	cin.tie(0);

    //n find k, n can +1 or -1 with 1 sec. or *2 for 0 sec.
    //0~100000
    int n, k;
    cin >> n >> k;

    if(n == k)
        cout << 0;
    else if(n > k)
        cout << n - k;
    else
        cout << bfs(n, k);

    return 0;
}
