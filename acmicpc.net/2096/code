#include <iostream>
#include <climits>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int cost[100000][3];
//int dp_max[100000][3];
//int dp_min[100000][3];

int dp_max[2][3]; //[0][]이전 [1][] 현재
int dp_min[2][3];

int main() {
    ios::sync_with_stdio(false);
	cin.tie(0);

    int n; //1 ~ 100001
    //int low = INT_MAX;
    //int high = INT_MIN;
    
    cin >> n;

    //input
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < 3; j++) {
            cin >> cost[i][j];
        }
    }

    //init dp
    dp_max[0][0] = cost[0][0];
    dp_max[0][1] = cost[0][1];
    dp_max[0][2] = cost[0][2];

    dp_min[0][0] = cost[0][0];
    dp_min[0][1] = cost[0][1];
    dp_min[0][2] = cost[0][2];

    if(n == 1) {
        cout << max(cost[0][0], max(cost[0][1], cost[0][2])) << " " << min(cost[0][0], min(cost[0][1], cost[0][2]));
        return 0;
    }

    for(int i = 1; i < n; i++) {
        for(int j = 0; j < 3; j++) {
            // if(j == 0) {
            //     dp_max[i][j] = cost[i][j] + max(dp_max[i-1][j], dp_max[i-1][j+1]);
            //     dp_min[i][j] = cost[i][j] + min(dp_min[i-1][j], dp_min[i-1][j+1]);
            // }
            // else if(j == 1) {
            //     dp_max[i][j] = cost[i][j] + max(dp_max[i-1][j-1], max(dp_max[i-1][j], dp_max[i-1][j+1]));
            //     dp_min[i][j] = cost[i][j] + min(dp_min[i-1][j-1], min(dp_min[i-1][j], dp_min[i-1][j+1]));
            // }
            // else {
            //     dp_max[i][j] = cost[i][j] + max(dp_max[i-1][j-1], dp_max[i-1][j]);
            //     dp_min[i][j] = cost[i][j] + min(dp_min[i-1][j-1], dp_min[i-1][j]);
            // }
            
            // if(i == n - 1) {
            //     if(dp_max[i][j] > high) {
            //         high = dp_max[i][j];
            //     }
            //     if(dp_min[i][j] < low) {
            //         low = dp_min[i][j];
            //     }
            // }

            if(j == 0) {
                int last_max = max(dp_max[0][j], dp_max[0][j+1]);
                int last_min = min(dp_min[0][j], dp_min[0][j+1]);
                
                dp_max[1][j] = cost[i][j] + last_max;
                dp_min[1][j] = cost[i][j] + last_min;
            }
            else if(j == 1) {
                int last_max = max(dp_max[0][j-1], max(dp_max[0][j], dp_max[0][j+1]));
                int last_min = min(dp_min[0][j-1], min(dp_min[0][j], dp_min[0][j+1]));
            
                dp_max[1][j] = cost[i][j] + last_max;
                dp_min[1][j] = cost[i][j] + last_min;
            }
            else {
                int last_max = max(dp_max[0][j-1], dp_max[0][j]);
                int last_min = min(dp_min[0][j-1], dp_min[0][j]);
                
                dp_max[1][j] = cost[i][j] + last_max;
                dp_min[1][j] = cost[i][j] + last_min;
            }
            
            // if(i == n - 1) {
            //     if(dp_max[1][j] > high) {
            //         high = dp_max[1][j];
            //     }
            //     if(dp_min[1][j] < low) {
            //         low = dp_min[1][j];
            //     }
            // }
        }
        for(int k = 0; k < 3; k++) {
            dp_max[0][k] = dp_max[1][k];
            dp_min[0][k] = dp_min[1][k];
        }
    }

    //print
    //cout << high << " " << low;
    cout << max({dp_max[1][0], dp_max[1][1], dp_max[1][2]}) << " " << min({dp_min[1][0], dp_min[1][1], dp_min[1][2]});

    return 0;
}
