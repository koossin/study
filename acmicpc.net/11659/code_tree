#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

int tree[400000];
int arr[100001];

void init_tree(int node, int start, int end) {
	if (start == end) {
		tree[node] = arr[start];
		return;
	}

	int mid = (start + end) / 2;

	init_tree(node * 2, start, mid);
	init_tree(node * 2 + 1, mid + 1, end);

	tree[node] = tree[node * 2] + tree[(node * 2) + 1];
}
int sum_tree(int node, int start, int end, int left, int right) { //if 2~4
	if (right < start || end < left) { //right start end left
		return 0;
	}
	if (left <= start && end <= right) { //left start end right
		return tree[node];
	}

	int mid = (start + end) / 2;

	return sum_tree(node * 2, start, mid, left, right) + sum_tree(node * 2 + 1, mid + 1, end, left, right);
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);

	int n, m;
	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		cin >> arr[i];
	}
	init_tree(1, 1, n);
	for (int i = 1; i <= m; i++) {
		int a, b;
		cin >> a >> b;
		cout << sum_tree(1, 1, n, a, b) << "\n";
	}

	return 0;
}
