#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>

using namespace std;

int visited[100001];

int bfs(int n, int k) {
	int time = 0;
	queue<int> q;
	q.push(n);
	visited[n] = true;

	while (!q.empty()) {
		int size = q.size();
		for (int i = 0; i < size; i++) {
			int cur = q.front();
			q.pop();

			if (cur == k) {
				return time;
			}

			if (cur - 1 >= 0 && !visited[cur - 1]) {
				q.push(cur - 1);
				visited[cur - 1] = true;
			}
			if (cur + 1 <= 100000 && !visited[cur + 1]) {
				q.push(cur + 1);
				visited[cur + 1] = true;
			}
			if (cur * 2 <= 100000 && !visited[cur * 2]) {
				q.push(cur * 2);
				visited[cur * 2] = true;
			}
		}
		time++;
	}

	return time;
}


int main() {
	int n, k;
	cin >> n >> k;
	
	fill(visited, visited + 100001, false);

	cout << bfs(n, k);

	return 0;
}
